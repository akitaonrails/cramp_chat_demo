h2. Cramp Chat Demo

"Cramp":http://m.onkey.org/2010/1/7/introducing-cramp is an asynchronous web framework still under development by "Pratik Naik":http://m.onkey.org/ which shows great promise for its use of "EventMachine":http://rubyeventmachine.com/.

This is just a proof-of-concept app to showcase Cramp's potential.

h2. Usage

This should install all the dependencies

<pre>
  gem install thin
  gem install cramp
  gem install tramp
</pre>

This demo uses MySQL, so you will need to create your own database. Read @config/database.sql@ to create it and edit @config/database.yml@ with the correct server, username and password.

If you want to test the WebSocket implementation outside of Google Chrome 4+, the app loads "web-socket.js":http://github.com/gimite/web-socket-js. As it uses Flash connection it is required that the server provides a policy file. This app uses "Peleus Uhley":http://www.adobe.com/devnet/flashplayer/articles/socket_policy_files.html implementation available in the @extra@ folder. Start it like this:

<pre>
  cd extra
  sudo python flashpolicyd.py --port 843 --file crossdomain.xml
</pre>

It has to be @sudo@ because 843 is a privileged port. Now you need to start up the application itself:

<pre>
  ruby chatserver.rb
</pre>

It will start the server on the port 3000. So you can fire up a webbrowser and use either of these URLs:

<pre>
  http://0.0.0.0:3000/chat
  http://0.0.0.0:3000/chat_poll
</pre>

The first URL is the WebSocket version. The second is a more usual Ajax Polling version, which may be more compatible with webbrowsers. As the WebSocket version uses Flash it's less friendly to environments behind proxies and firewalls.

You can also test the server using @curl@

<pre>
  curl http://0.0.0.0:3000/websocket
  curl http://0.0.0.0:3000/retrieve
  curl -d "from=foo&msg=hello" http://0.0.0.0:3000/receive
</pre>

The first URL will keep an open HTTP connection, receiving new messages as they are inserted in the database. The second one retrieves the last few messages and you can pass a 'last_timestamp' parameter to the URL with the value having the format of @Time.now.to_formatted_s(:db)@. Finally, the third operation simulates a form post to add new messages. The first URL is the WebSocket version, the last 2 are the polling version.

h2. Known Issues

* In Firefox and Safari, I had the web-socket.js working properly, but for some reason it stopped working. Beware of flash blockers in your browser.
* In the Polling version it is manually setting the last message's timestamp in the URL. I was still now able to make a version using a Rack::Session
* Just because it is a proof-of-concept, it uses Rack::Static to serve the HTML and JS files, but it's not certain that this is the best way to do it
* Up until Cramp 0.9, it depends on ActiveRecord, take a look at @lib/fixes.rb@

h2. TODO

* Add CSS to make the demo a little bit more compelling
* Add multiple room and user registration support, but this requires exchanging session information as well. Making Rack::Session work may be a requirement
* Add templating than just static file to allow for some HAML or ERB views, adding Tilt to Cramp would be good as well

h2. Changelog

* 02/14/2011 - Updated to Cramp 0.12 and the new Tramp gem.

h2. Credits

* "Pratik Naik":http://m.onkey.org/ for Cramp
* "Fabio Akita":http://www.akitaonrails.com for the Demo
